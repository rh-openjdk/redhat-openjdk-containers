#!/bin/sh

set -eo pipefail

source "${JBOSS_CONTAINER_UTIL_LOGGING_MODULE}/logging.sh"
source "${JBOSS_CONTAINER_MAVEN_S2I_MODULE}/maven-s2i"

# include our s2i_core_*() overrides/extensions
source "${JBOSS_CONTAINER_JAVA_S2I_MODULE}/s2i-core-hooks"

# inject our overridden maven_s2i_*() functions
source "${JBOSS_CONTAINER_JAVA_S2I_MODULE}/maven-s2i-overrides"

# invoke the build
maven_s2i_build

# run the pathfinder scripts to define JAVA_APP_JAR and JAVA_LIB_DIR
source "${JBOSS_CONTAINER_UTIL_PATHFINDER_MODULE}/pathfinder.sh"
setup_java_app_and_lib

# include our jlink scripts
if [ "$S2I_ENABLE_JLINK" = "true" ]; then

    source "${JBOSS_CONTAINER_JAVA_JLINK_MODULE}/preflight.sh"
    jlink_techpreview_warning
    jlink_preflight_check

    source "${JBOSS_CONTAINER_JAVA_JLINK_MODULE}/mkdeps.sh"
    echo "Invoking mkdeps"
    generate_deps || {
        log_error "mkdeps failed, return code: $?"
        exit 1
    }

    source "${JBOSS_CONTAINER_JAVA_JLINK_MODULE}/mkstrippeddeps.sh"
    echo "Stripping dependencies"
    mkstrippeddeps || {
        log_error "stripping dependencies failed, return code: $?"
        exit 1
    }

    source "${JBOSS_CONTAINER_JAVA_JLINK_MODULE}/generatejdkdeps.sh"
    echo "Generating JDK dependencies"
    generatejdkdeps || {
        log_error "generating JDK dependencies failed, return code: $?"
        exit 1
    }

    source "${JBOSS_CONTAINER_JAVA_JLINK_MODULE}/mkjreimage.sh"
    echo "Linking jre"
    generate_jre_image || {
        log_error "Linking JRE failed, return code: $?"
        exit 1
    }

fi
